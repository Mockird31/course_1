#ifndef _FILE_H_
#define _FILE_H_

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define FILE_NOT_DEFINE 2
#define MAX_STR 16
#define INVALIV_NUM_OF_ARG 3
#define ERROR_SIZE 4
#define ERROR_EMPTY 5
#define RAND_VAR 1000

/**
 * @brief Функция для чтения целого числа из файла по указанной позиции.
 *
 * @param f Указатель на файл, из которого будет произведено чтение.
 * @param pos Позиция, с которой начнется чтение (считывается как количество целых чисел).
 * @param find_num Адрес переменной, в которую будет записано прочитанное целое число.
 * @return EXIT_SUCCESS при успешном выполнении операции.
 */
int get_number_by_pos(FILE *f, size_t pos, int *find_num);

/**
 * @brief Записывает число по указанной позиции в файле.
 *
 * @param f Указатель на файл, в который будет записано число.
 * @param pos Позиция, относительно которой будет произведено смещение для записи числа.
 * @param num Число, которое нужно записать в файл.
 *
 * @return Возвращает значение EXIT_SUCCESS при успешной операции записи.
 */
int put_number_by_pos(FILE *f, size_t pos, int num);

/**
 * @brief Генерирует файл с случайными числами в заданном диапазоне.
 *
 * @param path Путь к файлу для генерации.
 * @param len Длина файла в байтах.
 * @return
 *      - #ERROR_EMPTY Если длина файла равна нулю.
 *      - #FILE_NOT_DEFINE Если не удалось открыть файл.
 *      - #EXIT_SUCCESS В случае успешной генерации файла.
 */
int generate_file(char *path, size_t len);

/**
 * @brief Получение размера файла в байтах и проверка его на соответствие размеру целого числа.
 *
 * @param file Указатель на структуру FILE, представляющую открытый файл.
 * @param len Указатель на переменную типа size_t, в которую будет записан размер файла в байтах.
 * @return
 *      - EXIT_SUCCESS, если размер файла кратен размеру целого числа и файл не пуст.
 *      - ERROR_SIZE, если размер файла не кратен размеру целого числа.
 *      - ERROR_EMPTY, если файл пуст.
 */
int get_size_bin(FILE *file, size_t *len);

/**
 * @brief Функция для чтения и вывода содержимого файла в формате целых чисел.
 *
 * @param path Путь к файлу, который нужно прочитать и вывести.
 * @return EXIT_SUCCESS, если операция прошла успешно, иначе - код ошибки.
 */
int print_file(char *path);

/**
 * @brief Сортирует файл по возрастанию значений целых чисел в нем.
 *
 * @param path Путь к файлу, который нужно отсортировать.
 * @return EXIT_SUCCESS если операция прошла успешно, иначе код ошибки.
 */
int sorted_file(char *path);

/**
 * @brief Конвертирует бинарный файл в текстовый формат.
 *
 * @param path_bin Путь к исходному бинарному файлу.
 * @param path_txt Путь к целевому текстовому файлу.
 * @return Возвращает код ошибки:
 *         - EXIT_SUCCESS если операция выполнена успешно.
 *         - FILE_NOT_DEFINE если не удалось открыть один из файлов.
 *         - Код ошибки от функции get_size_bin или get_number_by_pos при возникновении проблем с чтением бинарного файла.
 */
int from_bin_to_text(char *path_bin, char *path_txt);

/**
 * @brief Преобразует текстовый файл в бинарный.
 *
 * @param path_txt Путь к исходному текстовому файлу.
 * @param path_bin Путь к целевому бинарному файлу.
 * @return Возвращает код ошибки:
 *         - EXIT_SUCCESS если операция прошла успешно,
 *         - FILE_NOT_DEFINE если не удалось открыть один из файлов,
 *         - Код ошибки от функции get_size_txt() в случае её неудачного выполнения.
 */
int from_text_to_bin(char *path_txt, char *path_bin);

/**
 * @brief Функция для подсчета количества чисел в текстовом файле.
 *
 * @param file Указатель на открытый файл, из которого будут считываться данные.
 * @param len Указатель на переменную типа size_t, которая будет использоваться для хранения количества найденных чисел.
 * @return В случае успеха возвращает EXIT_SUCCESS, если файл пуст или не содержит чисел - возвращает ERROR_EMPTY.
 */
int get_size_txt(FILE *file, size_t *len);

#endif