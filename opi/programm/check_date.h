/**
 * @file check_date.h
 * @author Инякин Роман
 * @brief Объявление функций для проверки даты и времени
 * @version 0.1
 * @date 2024-06-05
 * 
 */

#ifndef _CHECK_DATE_H_
#define _CHECK_DATE_H_

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_STR 128
#define MAX_WORD 16
#define INPUT_ERROR 1
#define NO_WORDS 2
#define WRONG_DATE 3
#define MAX_COUNT 3
#define MONTHES "февраля января марта апреля мая июня июля августа сентября октября ноября декабря"
#define SEPS " "
#define NUMS_OF_MONTHES 12
#define FIRST_DATE_LATER 1
#define SECOND_DATE_LATER -1
#define DATE_EQUALS 0

/**
 * @brief Читает строку из стандартного ввода и копирует её в переданный буфер.
 *
 * @param str Указатель на буфер, в который будет скопирована введенная строка.
 * @return int Возвращает EXIT_SUCCESS в случае успешного чтения и копирования строки,
 *             INPUT_ERROR в случае ошибки ввода или если введенная строка не соответствует
 *             требованиям (слишком длинная или пустая).
 */
int input_strings(char *str);

/**
 * @brief Преобразует все символы в строке в нижний регистр.
 *
 * @param str Строка, символы которой нужно преобразовать в нижний регистр.
 */
void make_lower(char *str);

/**
 * @brief Разделяет строку на слова, используя заданные разделители.
 *
 * @param str Входная строка, которую нужно разделить.
 * @param words Массив, в который будут скопированы слова. Максимальное количество слов, которое может быть разделено, определено константой MAX_COUNT.
 * @param len Указатель на переменную, в которую будет записано количество разделенных слов.
 *
 * @return int Возвращает EXIT_SUCCESS, если количество слов равно 3, иначе возвращает INPUT_ERROR.
 */
int split(char *str, char date[MAX_COUNT][MAX_WORD + 1], size_t *len);

/**
 * @brief Проверяет, является ли переданный месяц действительным.
 *
 * @param month Строка, содержащая название месяца для проверки.
 * @return int Возвращает WRONG_MONTH, если месяц не найден, иначе EXIT_SUCCESS.
 */
int check_month(char *month);

/**
 * @brief Проверяет, является ли переданная строка корректным днем месяца.
 *
 * @param day Строка, представляющая день месяца.
 * @param int_day Указатель на переменную, в которую будет сохранено числовое значение дня, если он корректен.
 * @return int Возвращает EXIT_SUCCESS, если день корректен, иначе возвращает WRONG_DAY.
 */
int check_day(char *day);

/**
 * @brief Проверяет корректность полной даты.
 *
 * @param date Двумерный массив символов, представляющий дату.
 * @return int Возвращает EXIT_SUCCESS, если дата корректна, и WRONG_DATE в противном случае.
 */
int check_full_date(char date[MAX_COUNT][MAX_WORD + 1]);

/**
 * @brief Проверяет, является ли строка целым числом.
 *
 * @param str Указатель на строку, которую нужно проверить.
 * @return int Возвращает EXIT_SUCCESS, если строка является целым числом, иначе
 *              возвращает WRONG_DAY в случае обнаружения нецифрового символа.
 */
int is_integer(char *str);

/**
 * @brief Проверяет, является ли указанный год високосным.
 *
 * @param year Строка, представляющая год в виде числа.
 * @return int Возвращает EXIT_SUCCESS, если год является високосным, NOT_LEAP_YEAR, если год не является високосным,
 *             и WRONG_YEAR, если входная строка не представляет собой корректный год.
 */
int is_leap_year(char *year);

/**
 * @brief Проверяет, является ли переданный год валидным.
 *
 * @param year Строка, представляющая год.
 * @return int Возвращает EXIT_SUCCESS, если год валиден, и WRONG_YEAR в противном случае.
 */
int check_year(char *year);

/**
 * @brief Проверяет корректность даты.
 *
 * @param date Массив строк, представляющих дату. Первый элемент массива - день,
 *             второй - месяц, третий - год.
 * @param day Указатель на переменную, в которую будет записан день, если он корректен.
 * @return int Возвращает EXIT_SUCCESS, если дата корректна, иначе WRONG_DATE.
 */
int check_correct(char date[MAX_COUNT][MAX_WORD + 1]);

/**
 * @brief Удаляет пробелы в начале строки.
 *
 * @param str Указатель на строку, которую нужно обработать. Функция изменяет эту строку на месте.
 */
void ltrim(char *str);

/**
 * @brief Удаляет пробелы в конце строки.
 *
 * @param str Указатель на строку, которую нужно обработать. Функция изменяет эту строку на месте.
 */
void rtrim(char *str);

/**
 * @brief Преобразует название месяца из текстовой формы в числовой формат.
 *
 * @param month Название месяца в текстовой форме.
 * @return Числовое представление месяца (от 1 до 12) или -1, если месяц не найден.
 */
int monthToNumber(const char *month);

/**
 * @brief Сравнивает две даты в формате строки и возвращает код результата сравнения.
 *
 * @param date1 Первая дата для сравнения, представленная в виде массива символов.
 * @param date2 Вторая дата для сравнения, представленная в виде массива символов.
 * @return Коды результата сравнения:
 * - #FIRST_DATE_LATER, если первая дата позже второй.
 * - #SECOND_DATE_LATER, если вторая дата позже первой.
 * - #DATE_EQUALS, если даты равны.
 */
int compareDates(char date1[MAX_COUNT][MAX_WORD + 1], char date2[MAX_COUNT][MAX_WORD + 1]);

/**
 * @brief Функция для разбора строки с временем в формате "часы:минуты".
 *
 * @param time Строка, содержащая время в формате "часы:минуты" (например, "12:34").
 * @param hour Указатель на переменную, в которую будет записан полученный час.
 * @param minute Указатель на переменную, в которую будет записана полученная минута.
 * @return EXIT_SUCCESS, если строка была успешно разобрана; иначе EXIT_FAILURE.
 */
int parse_time(const char *time, uint16_t *hour, uint16_t *minute);

/**
 * @brief Сравнивает два времени в формате "HH:MM".
 * 
 * @param time1 Указатель на строку, содержащую время в формате "HH:MM".
 * @param time2 Указатель на строку, содержащую время в формате "HH:MM".
 * 
 * @return int Результат сравнения времени:
 * - Если время1 позже времени2, возвращает FIRST_DATE_LATER.
 * - Если время1 раньше времени2, возвращает SECOND_DATE_LATER.
 * - Если времена равны, возвращает DATE_EQUALS.
 * - Если произошла ошибка при разборе времени, возвращает код ошибки (res).
 */
int compare_time(const char *time1, const char *time2);

#endif
